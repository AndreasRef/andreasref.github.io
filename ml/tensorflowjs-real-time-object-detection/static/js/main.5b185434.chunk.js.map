{"version":3,"sources":["index.js"],"names":["App","videoRef","React","createRef","canvasRef","detectFrame","video","model","detect","then","predictions","_this","renderPredictions","requestAnimationFrame","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","_this2","this","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","cocoSsd","all","values","catch","error","console","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","autoPlay","playsInline","muted","ref","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"wRAOMA,0NACJC,SAAWC,IAAMC,cACjBC,UAAYF,IAAMC,cA+BlBE,YAAc,SAACC,EAAOC,GACpBA,EAAMC,OAAOF,GAAOG,KAAK,SAAAC,GACvBC,EAAKC,kBAAkBF,GACvBG,sBAAsB,WACpBF,EAAKN,YAAYC,EAAOC,UAK9BK,kBAAoB,SAAAF,GAClB,IAAMI,EAAMH,EAAKP,UAAUW,QAAQC,WAAW,MAC9CF,EAAIG,UAAU,EAAG,EAAGH,EAAII,OAAOC,MAAOL,EAAII,OAAOE,QAEjD,IAAMC,EAAO,kBACbP,EAAIO,KAAOA,EACXP,EAAIQ,aAAe,MACnBZ,EAAYa,QAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GACpBP,EAAQK,EAAWE,KAAK,GACxBN,EAASI,EAAWE,KAAK,GAE/BZ,EAAIc,YAAc,UAClBd,EAAIe,UAAY,GAChBf,EAAIgB,WAAWL,EAAGE,EAAGR,EAAOC,GAE5BN,EAAIiB,UAAY,UAChB,IAAMC,EAAYlB,EAAImB,YAAYT,EAAWU,OAAOf,MAC9CgB,EAAaC,SAASf,EAAM,IAClCP,EAAIuB,SAASZ,EAAGE,EAAGK,EAAY,EAAGG,EAAa,KAGjDzB,EAAYa,QAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GAE1BZ,EAAIiB,UAAY,UAChBjB,EAAIwB,SAASd,EAAWU,MAAOT,EAAGE,yFAlElB,IAAAY,EAAAC,KAClB,GAAIC,UAAUC,cAAgBD,UAAUC,aAAaC,aAAc,CACjE,IAAMC,EAAgBH,UAAUC,aAC7BC,aAAa,CACZE,OAAO,EACPvC,MAAO,CACLwC,WAAY,UAGfrC,KAAK,SAAAsC,GAGJ,OAFAC,OAAOD,OAASA,EAChBR,EAAKtC,SAASc,QAAQkC,UAAYF,EAC3B,IAAIG,QAAQ,SAACC,EAASC,GAC3Bb,EAAKtC,SAASc,QAAQsC,iBAAmB,WACvCF,SAIFG,EAAeC,MACrBL,QAAQM,IAAI,CAACF,EAAcV,IACxBnC,KAAK,SAAAgD,GACJlB,EAAKlC,YAAYkC,EAAKtC,SAASc,QAAS0C,EAAO,MAEhDC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,uCA+CpB,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEC,UAAU,OACVC,UAAQ,EACRC,aAAW,EACXC,OAAK,EACLC,IAAK5B,KAAKvC,SACVkB,MAAM,MACNC,OAAO,QAETyC,EAAAC,EAAAC,cAAA,UACEC,UAAU,OACVI,IAAK5B,KAAKpC,UACVe,MAAM,MACNC,OAAO,gBA1FClB,IAAMmE,YAiGlBC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOb,EAAAC,EAAAC,cAAC/D,EAAD,MAASsE","file":"static/js/main.5b185434.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\nimport \"./styles.css\";\n\nclass App extends React.Component {\n  videoRef = React.createRef();\n  canvasRef = React.createRef();\n\n  componentDidMount() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const webCamPromise = navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"user\"\n          }\n        })\n        .then(stream => {\n          window.stream = stream;\n          this.videoRef.current.srcObject = stream;\n          return new Promise((resolve, reject) => {\n            this.videoRef.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        });\n      const modelPromise = cocoSsd.load();\n      Promise.all([modelPromise, webCamPromise])\n        .then(values => {\n          this.detectFrame(this.videoRef.current, values[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n\n  detectFrame = (video, model) => {\n    model.detect(video).then(predictions => {\n      this.renderPredictions(predictions);\n      requestAnimationFrame(() => {\n        this.detectFrame(video, model);\n      });\n    });\n  };\n\n  renderPredictions = predictions => {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Font options.\n    const font = \"16px sans-serif\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      // Draw the bounding box.\n      ctx.strokeStyle = \"#00FFFF\";\n      ctx.lineWidth = 40;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = \"#00FFFF\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 10); // base 10\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(prediction.class, x, y);\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <video\n          className=\"size\"\n          autoPlay\n          playsInline\n          muted\n          ref={this.videoRef}\n          width=\"600\"\n          height=\"500\"\n        />\n        <canvas\n          className=\"size\"\n          ref={this.canvasRef}\n          width=\"600\"\n          height=\"500\"\n        />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}